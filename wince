#!/bin/sh -x

clear
export RUST_BACKTRACE=full # or 1
rustup update

projdir=/mnt/c/temp/wink    # directory containing cargo.toml
linbld=/tmp/wink.build      # WSL path to directory for building Linux binary
winbld='C:\temp\wink.build' # Windows path to directory for building Windows binary
lwinbld=`wslpath $winbld`   # WSL path to directory for building Windows binary
linstall=~/bin              # WSL binary install path

cd $projdir                 # avoid specifying project path for all commands

                            # error out quickly if compile is not possible
cmd="time cargo check -v --workspace --all-features"
result=$( $cmd 3>&1 1>&2 2>&3 | tee /dev/fd/2 )

if [ "$?" -ne "0" ]; then
    echo cargo check failed with non-zero exit code
    echo To reproduce: cd `pwd` \; $cmd
    cd - > /dev/null # revert to the previous directory
    exit 2
fi

# sometimes cargo check fails the first time; in which case, run it again.

if echo $result | egrep -qi "error|warning"; then
    result=$( time $cmd 3>&1 1>&2 2>&3 | tee /dev/fd/2 )
    
    if [ "$?" -ne "0" ]; then
        echo cargo check failed the second run with a non-zero exit code
        echo To reproduce: cd `pwd` \; $cmd # and look for error/warning
        cd - > /dev/null # revert to the previous directory
        exit 2
    fi

    if echo $result | egrep -qi "error|warning"; then
        echo cargo check failed the second run with an error or warning
        echo $result | egrep -i "error|warning"
        echo To reproduce: cd `pwd` \; $cmd # and look for error/warning
        cd - > /dev/null # revert to the previous directory
        exit 2
    fi
fi

#//TODO: exclude invocablecategory.rs may not be working

#set +x
set -x
cmd="time rustfmt -l -v ./src/main.rs ./src/lib.rs"
result=$( time $cmd 3>&1 1>&2 2>&3 | tee /dev/fd/2 )

if [ "$?" -ne "0" ] || echo $result | egrep -qi "error|warning"; then
    echo rustfmt all failed
    echo To reproduce: cd `pwd` \; $cmd # and look for error/warning
    cd - > /dev/null # revert to the previous directory
    exit 3
fi

cmd="time rustfmt -l -v --config max_width=2500 ./src/wsl/inv/invocablecategory.rs"
result=$( time $cmd 3>&1 1>&2 2>&3 | tee /dev/fd/2 )

# this file is more manageable this way

if [ "$?" -ne "0" ] || echo $result | egrep -qi "error|warning"; then
    echo rustfmt invocablecategory.cs failed
    echo To reproduce: cd `pwd` \; $cmd # and look for error/warning
    cd - > /dev/null # revert to the previous directory
    exit 3
fi

set +x
    
for f in "$(find . -iname \*.rs -print)"; do
    ls -l $f
    wc -clw $f
done

set -x
cargo update -v 
cmd='time cargo-clippy -v'
result=$( $cmd 3>&1 1>&2 2>&3 | tee /dev/fd/2 )

if [ "$?" -ne "0" ] || echo $result | egrep -qi "error|warning"; then
    echo cargo-clippy failed
    echo To reproduce: cd `pwd` ; $cmd
    cd - > /dev/null # revert to the previous directory
    exit 4
fi

# excludes --doc
# --all-targets is a bit excessive... //--show-output is unnecessary // --no-fail-fast
cmd="time cargo test -v --workspace --all-features --target-dir $linbld -- --nocapture -- -epdv word a b c"
result=$( $cmd 3>&1 1>&2 2>&3 | tee /dev/fd/2 )

if [ "$?" -ne "0" ] || echo $result | egrep -qi "could not compile|warning|test result. FAILED|error. test failed"; then
    echo cargo test failed
    echo To reproduce: cd `pwd` \; $cmd
    cd - > /dev/null # revert to the previous directory
    exit 5
fi

#cargo clean --target-dir /tmp/wink.build       # kills build performance and result in err/warn that may cause script to abort   
# -release determines  binary build path below 
cmd="time cargo build -v --target-dir $linbld --release"
result=`$cmd 3>&1 1>&2 2>&3 | tee /dev/fd/2`

if [ "$?" -ne "0" ] || echo $result | sed -e s'/error.format/3rror.format/g' | egrep -qi "error|warning"; then
    echo cargo build failed
    echo To reproduce: cd `pwd` \; $cmd
    cd - > /dev/null # revert to the previous directory
    exit 6
fi

time cargo doc -v --target-dir $linbld               # --open to open in browser
ls -l ${linbld}/release/wink            # show WSL binary file size and build date
rm ${linstall}/wink                     # remove installed WSL binary
cp ${linbld}/release/wink $linstall     # install new WSL binary
time cargo.exe build --release --target-dir "$winbld" # --release affects binary path below 
`wslpath ${winbld}`/release/wink.exe -ep > ${linbld}/doc/wink/wink.json # export JSON to docs
ls -l ${linbld}/doc/wink/wink.json      # show JSON file size and touch time
cp ${linbld}/doc/wink/wink.json .       # copy JSON to project root for github
path=`cmd.exe /c echo %USERPROFILE% | sed -e 's/\r//g'` # install Windows binary to this directory in %PATH%
path=`wslpath $path | sed -e 's/\r//g'`/AppData/Local/Microsoft/WindowsApps 
cp ${lwinbld}/release/wink.exe $path # install Windows binary
time ${linstall}/wink $@ # run Linux build with parameters supplied on command line
cp /mnt/c/temp/wink/wince $linstall # install any updates to this wince shell script
cd - > /dev/null # revert to the previous directory
exit 0